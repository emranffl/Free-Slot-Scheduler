/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package freeslotscheduler;

import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JButton;

/**
 *
 * @author emran
 */
public class ForgotPassword extends javax.swing.JFrame {

    /**
     *
     */
    private static final long serialVersionUID = 1L;

    /**
     * Creates new form ForgotPassword
     */
    public ForgotPassword() {
        // Initializing button array
        buttonarray = new JButton[3];
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        validationpanel = new javax.swing.JPanel();
        id = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        resetpass = new javax.swing.JButton();
        Return = new javax.swing.JButton();
        loginas = new javax.swing.JLabel();
        studentrb = new javax.swing.JRadioButton();
        volunteerrb = new javax.swing.JRadioButton();
        resetpasspanel = new javax.swing.JPanel();
        newpass = new javax.swing.JTextField();
        reenternewpass = new javax.swing.JTextField();
        confirm = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Free Slot Scheduler");
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        getContentPane().setLayout(new java.awt.CardLayout());

        validationpanel.setBackground(new java.awt.Color(255, 255, 255));
        validationpanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Reset Password", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 16))); // NOI18N

        id.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        id.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ID", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Console", 0, 14))); // NOI18N

        email.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        email.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Email", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Console", 0, 14))); // NOI18N

        resetpass.setText("Reset Password");
        resetpass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetpassActionPerformed(evt);
            }
        });

        Return.setText("Return");
        Return.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnActionPerformed(evt);
            }
        });

        loginas.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        loginas.setText("Designation");
        loginas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        buttonGroup.add(studentrb);
        studentrb.setText("Student");

        buttonGroup.add(volunteerrb);
        volunteerrb.setText("Volunteer");

        javax.swing.GroupLayout validationpanelLayout = new javax.swing.GroupLayout(validationpanel);
        validationpanel.setLayout(validationpanelLayout);
        validationpanelLayout.setHorizontalGroup(
            validationpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(validationpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(validationpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(validationpanelLayout.createSequentialGroup()
                        .addComponent(loginas, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(studentrb, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(volunteerrb, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
                    .addComponent(id)
                    .addComponent(email)
                    .addGroup(validationpanelLayout.createSequentialGroup()
                        .addComponent(resetpass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Return, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        validationpanelLayout.setVerticalGroup(
            validationpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(validationpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(validationpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginas)
                    .addComponent(studentrb)
                    .addComponent(volunteerrb))
                .addGap(18, 18, 18)
                .addGroup(validationpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetpass)
                    .addComponent(Return))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(validationpanel, "card2");

        resetpasspanel.setBackground(new java.awt.Color(255, 255, 255));
        resetpasspanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Confirm Password", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 16))); // NOI18N

        newpass.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        newpass.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "New Password", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Console", 0, 14))); // NOI18N

        reenternewpass.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        reenternewpass.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Re-enter New Password", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Console", 0, 14))); // NOI18N

        confirm.setText("Confirm Reset Password");
        confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout resetpasspanelLayout = new javax.swing.GroupLayout(resetpasspanel);
        resetpasspanel.setLayout(resetpasspanelLayout);
        resetpasspanelLayout.setHorizontalGroup(
            resetpasspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resetpasspanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resetpasspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newpass, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                    .addComponent(reenternewpass)
                    .addComponent(confirm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        resetpasspanelLayout.setVerticalGroup(
            resetpasspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resetpasspanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(newpass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(reenternewpass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(confirm)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        getContentPane().add(resetpasspanel, "card3");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void resetpassActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_resetpassActionPerformed
        if (id.getText().isEmpty() || email.getText().isEmpty() || (!studentrb.isSelected() && !volunteerrb.isSelected())) {
            // Confirms that the credentials are not empty
            if (id.getText().isEmpty() || email.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Fields canot be left empty! Enter required information.", "Empty Credentials", 2);
            } else if (!studentrb.isSelected() && !volunteerrb.isSelected()) {
                JOptionPane.showMessageDialog(this, "Select designation!", "Selection Error", 2);
            }
        } else {
            // Reaches if the creedentials are not empty and the designation is selected
            String studentQuery;
            if (studentrb.isSelected()) {
                // Query for "Student" designation
                studentQuery = "SELECT Name, ID, email, pass FROM `student` WHERE ID='" + id.getText().trim() + "'";
            } else {
                // Query for "Volunteer" designation
                studentQuery = "SELECT Name, ID, email, pass FROM `volunteer` WHERE ID='" + id.getText().trim() + "'";
            }

            DataManager datamanager = new DataManager();
            AttributeVerifier av = new AttributeVerifier();

            // Gets the required data from database based on query
            datamanager.getData(studentQuery);

            if (av.checkId(id.getText().trim())) {
                // If ID matches from database
                if (av.checkPasswordResetInfo(id.getText().trim(), email.getText().trim())) {
                    // If Email matches from database

                    resetpass.setEnabled(false); // "Reset Password" is disabled

                    EmailManager emailmanager = new EmailManager();

                    OTP = emailmanager.sendEmail(); // Sends OTP email
                    OTPVerifier(); // Verifies entered OTP

                    // Closes the connection
                    datamanager.close();
                } else {
                    // If Email does not match from database
                    JOptionPane.showMessageDialog(this, "Entered email does not match with corresponding ID: " + id.getText().trim() + "!\nPassword reset failed.", "Credential Mismatch", 2);
                    email.setText(null);
                    email.requestFocus();
                }
            } else {
                // If ID does not match from database
                if (studentrb.isSelected()) {
                    JOptionPane.showMessageDialog(this, "ID not found! Unregistered " + studentrb.getText().toLowerCase() + " ID.", "Wrong Credential", 2);
                } else {
                    JOptionPane.showMessageDialog(this, "ID not found! Unregistered " + volunteerrb.getText().toLowerCase() + " ID.", "Wrong Credential", 2);
                }
                id.setText(null);
                email.setText(null);
                buttonGroup.clearSelection();
                id.requestFocus();
            }
        }
    }// GEN-LAST:event_resetpassActionPerformed

    private void ReturnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ReturnActionPerformed
        this.dispose(); // Disposes this JFrame upon clicking on "Return"
    }// GEN-LAST:event_ReturnActionPerformed

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowLostFocus
        this.requestFocus();
        // Upon loosing focus from this JFrame, requests the focus back on itself
        id.requestFocus();
    }// GEN-LAST:event_formWindowLostFocus

    private void confirmActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_confirmActionPerformed
        if (newpass.getText().isEmpty() || reenternewpass.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Fields canot be left empty! Enter required information.",
                    "Empty Credentials", 2);
        } else {
            if (newpass.getText().trim().equals(reenternewpass.getText().trim())) { // Compares the entered credentials
                // If newly entered passwords match
                DataManager datamanager = new DataManager();
                String updateQuery;

                if (studentrb.isSelected()) {
                    // Query for "student" table update 
                    updateQuery = "UPDATE `student` SET `pass` = '" + newpass.getText().trim() + "' WHERE `student`.`ID` = '" + id.getText() + "'";
                } else {
                    // Query for "volunteer" table update
                    updateQuery = "UPDATE `volunteer` SET `pass` = '" + newpass.getText().trim() + "' WHERE `volunteer`.`ID` = '" + id.getText() + "'";
                }

                datamanager.updateData(updateQuery); // Executes query and updates password in database
                datamanager.close();

                JOptionPane.showMessageDialog(this, "Password reset successful!", "Success", 2);

                this.dispose(); // Disposes the JFrame
            } else {
                // If newly entered passwords do not match
                JOptionPane.showMessageDialog(this, "New passwords do not match! Enter new password.", "Error", 2);
                newpass.requestFocus();
            }
        }
    }// GEN-LAST:event_confirmActionPerformed

    private void OTPVerifier() {
        // Handles the OTP sending tasks
        JPanel joptionpanel = new JPanel();
        JTextField textField = new JTextField(5);

        buttonarray[0] = new JButton("Confirm");
        buttonarray[1] = new JButton("Resend");
        buttonarray[2] = new JButton("Cancel");

        // Action listeners to the customized JButtons
        buttonarray[0].addActionListener((java.awt.event.ActionEvent evt) -> {
            // Confirm button
            if (textField.getText() == null || textField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "OTP cannot be empty! Enter code to continue.", "Error", 2);
            } else if (OTP.equals(textField.getText())) {
                validationpanel.setVisible(false);
                resetpasspanel.setVisible(true);

                JOptionPane.getRootFrame().dispose();
                // Validates OTP and returns to the line from where the method was called
            } else {
                // Reaches here if the OTP does not match
                JOptionPane.showMessageDialog(null, "Wrong code!", "OTP Error", 2);
                textField.setText(null);
                textField.requestFocus();
            }
        });
        buttonarray[1].addActionListener((java.awt.event.ActionEvent evt) -> {
            // Resend button
            EmailManager emailmanager = new EmailManager(); // Initializing the class
            OTP = emailmanager.sendEmail(); // Resends OPT email with new code

            delaythread = new DelayThread(); // Initializing the thread class
            delaythread.start(); // Invoking the run method

            textField.setText(null);
            textField.requestFocus();
        });
        buttonarray[2].addActionListener((java.awt.event.ActionEvent evt) -> {
            // Cancel button
            if (delaythread.isActive()) {
                delaythread.stopThread();
            }

            JOptionPane.getRootFrame().dispose(); // Closing the JOptionPane OptionDialog on calcellation
            resetpass.setEnabled(true); // "Reset Password" is enabled
        });
        textField.addKeyListener(new java.awt.event.KeyAdapter() {
            // OTP textfield
            @Override
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    // Clicking on "Confirm" upon hitting enter key
                    buttonarray[0].doClick();
                }
            }
        });

        joptionpanel.add(new JLabel("An email has been sent containing the password reset code. Enter the code to continue: "));
        joptionpanel.add(textField);

        delaythread = new DelayThread(); // Initializing the thread class
        delaythread.start(); // Invoking the run method

        // Displaying the JOptionDialog passing the JPanel and the JButtons
        int choice = JOptionPane.showOptionDialog(null, joptionpanel, "One Time Passcode", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, buttonarray, null);

        if (choice == JOptionPane.CLOSED_OPTION || choice == JOptionPane.YES_OPTION) {
            // If the OptionDialog is closed clicking the "x" option or "Confirm" button (after verification)
            if (delaythread.isActive()) {
                delaythread.stopThread();
            }

            resetpass.setEnabled(true); // "Reset Password" is enabled
        }
    }

    public static void main() {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ForgotPassword.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ForgotPassword().setVisible(true); // Initializing and displaying the JFrame
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Return;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JButton confirm;
    private javax.swing.JTextField email;
    private javax.swing.JTextField id;
    private javax.swing.JLabel loginas;
    private javax.swing.JTextField newpass;
    private javax.swing.JTextField reenternewpass;
    private javax.swing.JButton resetpass;
    private javax.swing.JPanel resetpasspanel;
    private javax.swing.JRadioButton studentrb;
    private javax.swing.JPanel validationpanel;
    private javax.swing.JRadioButton volunteerrb;
    // End of variables declaration//GEN-END:variables
    // Custom variables declaration - do not modify
    private DelayThread delaythread;
    private String OTP;
    protected static JButton[] buttonarray; // OptionDialog buttons' array
    // End of custom variables declaration
}
